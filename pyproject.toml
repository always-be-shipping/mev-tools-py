[project]
name = "mev-tools-py"
version = "0.2.0"
description = "Tools to help with MEV research and development in Python."
readme = "README.md"
authors = [{ name = "Kyle Montag", email = "thekylemontag@gmail.com" }]
requires-python = ">=3.11"
dependencies = [
    "web3>=7.13.0",
]

[build-system]
requires = ["uv_build>=0.8.11,<0.9.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.1.0",
    "ruff>=0.12.9",
    "poethepoet>=0.29.0",
    "commitizen>=3.29.0",
    "python-dotenv>=1.1.1",
    "pre-commit>=4.0.0",
]

[tool.poe.tasks]
# Development workflow
install = "uv sync"
dev = { sequence = ["install", "format", "lint", "typecheck", "test"], help = "Full development setup and check" }

# Testing
test = "pytest --cov=src"
test-watch = "pytest --cov=src -f"
test-verbose = "pytest --cov=src -v"
coverage = "pytest --cov=src --cov-report=html"

# Code quality
lint = "ruff check ."
lint-fix = "ruff check . --fix"
format = "ruff format ."
format-check = "ruff format . --check"
typecheck = "mypy src"

# Combined quality checks
check = { sequence = ["format-check", "lint", "typecheck"], help = "Run all code quality checks" }
fix = { sequence = ["format", "lint-fix"], help = "Auto-fix code style issues" }

# Cleaning
clean = "rm -rf .pytest_cache .mypy_cache .ruff_cache **/__pycache__ **/*.pyc .coverage htmlcov/ dist/ build/"

# Building and publishing
build = "uv build"
publish = { sequence = ["clean", "build"], help = "Clean and build the package" }

# Pre-commit simulation
pre-commit = { sequence = ["format", "lint", "typecheck", "test"], help = "Run pre-commit checks" }

[tool.poe.tasks.test-file]
help = "Run tests for a specific file"
cmd = "pytest ${file}"
args = [{ name = "file", help = "Test file to run", positional = true }]

[tool.poe.tasks.test-function]
help = "Run a specific test function"
cmd = "pytest ${file}::${function}"
args = [
    { name = "file", help = "Test file containing the function" },
    { name = "function", help = "Test function name" }
]

[tool.pytest.ini_options]
markers = [
    "integration: marks tests as integration tests requiring RPC connection (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow running"
]
testpaths = ["tests"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra"
]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version = "0.1.0"
version_scheme = "semver"
version_provider = "pep621"
update_changelog_on_bump = true
major_version_zero = true
bump_message = "bump: version $current_version â†’ $new_version"
